program         ::= { linker newline }* { top_def newline }*

linker          ::= "load" STRING
top_def         ::= "init" block
                 | "def" IDENT "(" [ param_list ] ")" [ ":" type ] block
                 | "init" "type" IDENT "=" type
                 | "def" "struct" IDENT "{" struct_field_list "}"

param_list      ::= param { "," param }
param           ::= IDENT ":" type

block           ::= "{" { stmt newline }* "}"

stmt            ::= decl_stmt
                 | assign_stmt
                 | expr_stmt
                 | if_stmt
                 | while_stmt
                 | return_stmt
                 | break_stmt
                 | continue_stmt
                 | inj_stmt

decl_stmt       ::= "let" assignable_expr [ ":" type ] "=" expr
assign_stmt     ::= assignable_expr "=" expr
expr_stmt       ::= expr

if_stmt         ::= "if" expr block { "elseif" expr block } [ "else" block ]
while_stmt      ::= "while" expr block
return_stmt     ::= "return" [ expr ]
break_stmt      ::= "break"
continue_stmt   ::= "continue"

struct_field_list ::= struct_field { newline struct_field }*
struct_field       ::= IDENT ":" type

inj_stmt        ::= "inj" IDENT "{" { expr } "}"

type            ::= base_type | "*" type
base_type       ::= "u16" | "bool" | "str" | IDENT

expr            ::= def_expr
                 | assignable_expr { op assignable_expr }

assignable_expr ::= postfix_expr

postfix_expr    ::= simple_expr { access_or_call }*
access_or_call  ::= "." IDENT
                 | "(" [ expr_list ] ")"

simple_expr     ::= literal
                 | IDENT
                 | "(" expr ")"
                 | "-" simple_expr
                 | "*" simple_expr
                 | "!" simple_expr
                 | struct_init
                 | def_expr
                 | "{" { stmt newline }* [ expr ] "}"

field_access     ::= assignable_expr "." IDENT   (* folded into postfix_expr *)

def_expr        ::= "def" "(" [ param_list ] ")" [ ":" type ] block

struct_init     ::= "()"

expr_list       ::= expr { "," expr }

op              ::= "+" | "-" | "*" | "/" | "%"
                 | "==" | "!=" | "<" | ">" | "<=" | ">="
                 | "="
                 | "and" | "or"

literal         ::= NUMBER | STRING | "true" | "false" | "nil"
IDENT           ::= letter { letter | digit | "_" }
STRING          ::= '"' { char | "\\" ("n"|"r"|"t"|"\""|"\\") } '"'
NUMBER          ::= digit { digit }

newline         ::= NEWLINE
